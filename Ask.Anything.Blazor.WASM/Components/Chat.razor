@using Ask.Anything.Blazor.WASM.Models
@using Ask.Anything.Blazor.WASM.Services
@using MudBlazor
@using OpenAI.ObjectModels.RequestModels
@using Ask.Anything.Blazor.Shared.Models
@implements IDisposable
@inject StateData StateData


<style>
    .chat-box {
        max-width: 70%;
    }

    @@media screen and (max-width: 600px) {
        .chat-box {
            max-width: 85%;
        }
    }
</style>


<MudListItem>
    @if (isUser)
    {
        <div class="item-root">
            <MudStack Class="mx-4" Row="true">
                <MudSpacer/>
                <MudStack Spacing="1" Class="chat-box">
                    <MudText Typo="Typo.body1" Align="Align.Right">
                        <b>You</b>
                    </MudText>
                    <MudStack Row="true">
                        @if (!StateData.IsAwaitingResponse)
                        {
                        }
                        else
                        {
                            <MudSpacer/>
                        }
                        <MudPaper Elevation="1" Class="px-4 py-3" Style=@(!isDarkMode ? "color: white; background: #323332;" : "")>
                            <MudText Style="white-space: pre-wrap" Typo="Typo.body1">@MessageThreadItem.Text</MudText>
                        </MudPaper>
                    </MudStack>
                </MudStack>
                <MudAvatar>
                    <MudIcon Icon="@Icons.Material.Filled.Person"></MudIcon>
                </MudAvatar>
            </MudStack>
        </div>
    }
    else
    {
        <MudStack Class=@(StateData.IsAwaitingResponse && StateData.CurrentMessageThread.Last().Text == MessageThreadItem.Text ? "mb-12 mx-4" : "mx-4") Row="true">
            <MudAvatar Color="Color.Primary">AA</MudAvatar>
            <MudStack Spacing="1" Class="chat-box">
                @if (StateData.IsAwaitingResponseStream && string.IsNullOrWhiteSpace(MessageThreadItem.Text))
                {
                    <MudPaper Elevation="1" Class="px-4 py-3" Style="text-align: center;">
                        <MudProgressCircular Size="Size.Small" Color="Color.Secondary" Indeterminate="true" Style="vertical-align: bottom;"/>
                    </MudPaper>
                }
                else
                {
                    <MudPaper Elevation="1" Class="px-4 py-3" Style=@(isDarkMode ? "color: white;" : "")>
                        <Markdown Content=@MessageThreadItem.Text/>
                    </MudPaper>
                }
            </MudStack>
        </MudStack>
    }
</MudListItem>


@code {
    [CascadingParameter] public bool isDarkMode { get; set; }

    [Parameter] public Message MessageThreadItem { get; set; } = default!;

    private bool isUser;
    private bool isEditing;
    private MultilineInput multilineInput;

    protected override async Task OnInitializedAsync()
    {
        NotifierService.Notify += OnNotify;
        isUser = MessageThreadItem.Sender == Sender.USER;
    }

    private async Task OnNotify()
    {
        await InvokeAsync(StateHasChanged);
    }

    private async Task SetEditState(bool editing)
    {
        isEditing = editing;
        StateHasChanged();
    }

    private async Task OnEditDoneClicked()
    {
        await multilineInput.Submit();
    }

    private async Task SubmitEdit(string message)
    {
        isEditing = false;
        
        if (message == MessageThreadItem.Text)
        {
            return;
        }
        
    }
    
    private async Task OnMoveClicked(Direction direction)
    {
    }

    public void Dispose()
    {
        NotifierService.Notify -= OnNotify;
    }
}