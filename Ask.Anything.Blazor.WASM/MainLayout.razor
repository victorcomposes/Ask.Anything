@using MudBlazor
@using Blazored.LocalStorage
@using Ask.Anything.Blazor.WASM.Services
@using Ask.Anything.Blazor.WASM.Models
@using Ask.Anything.Blazor.Shared.Models
@inherits LayoutComponentBase


@inject StateData StateData
@inject SignalRClient SignalRClient
@inject ISnackbar Snackbar
@inject ILocalStorageService Storage

<MudThemeProvider @ref="@_mudThemeProvider" Theme="_theme" @bind-IsDarkMode="@_isDarkMode"/>
<MudDialogProvider Position="DialogPosition.Center"/>
<MudSnackbarProvider/>

<style>
    html, body, #app {
        height: 100%;
    }
</style>


<MudLayout>
    <MudAppBar Elevation="0">
        <MudStack Justify="Justify.Center" Class="pl-2">
            <MudText Typo="Typo.h4">Ask Anything</MudText>
        </MudStack>
        <MudSpacer/>
        @switch (themePreference)
        {
            case ThemePreference.Light:
                <MudTooltip Duration="1000" Text="Switch to Dark Theme">
                    <MudIconButton Icon="@Icons.Material.Rounded.DarkMode" Color="Color.Inherit" OnClick="@(() => SetThemePreference(ThemePreference.Dark))"/>
                </MudTooltip>

                break;

            case ThemePreference.Dark:
                <MudTooltip Duration="1000" Text="Switch to System Theme">
                    <MudIconButton Icon="@Icons.Material.Rounded.Devices" Color="Color.Inherit" OnClick="@(() => SetThemePreference(ThemePreference.System))"/>
                </MudTooltip>

                break;

            case ThemePreference.System:
                <MudTooltip Duration="1000" Text="Switch to Light Theme">
                    <MudIconButton Icon="@Icons.Material.Rounded.LightMode" Color="Color.Inherit" OnClick="@(() => SetThemePreference(ThemePreference.Light))"/>
                </MudTooltip>

                break;

            default:
                goto case ThemePreference.Light;
        }
    </MudAppBar>
    <MudMainContent Style="height: 100%;">
        <CascadingValue Value="_theme">
            <CascadingValue Value="_isDarkMode">
                <MudContainer MaxWidth="MaxWidth.Large" Style="height: 100%">
                    @Body
                </MudContainer>
            </CascadingValue>
        </CascadingValue>
    </MudMainContent>
</MudLayout>


@code {
    //bool _drawerOpen = true;
    private MudThemeProvider _mudThemeProvider;
    bool _isDarkMode;
    bool systemIsDarkMode;

    ThemePreference themePreference;

    private MudTheme _theme = new MudTheme
    {
        Palette = new PaletteLight()
        {
            Primary = "#AAA",
            Secondary = "#ffc107ff",
            Error = "#CC4141",
            AppbarBackground = "#323332",
            BackgroundGrey = "#f9fbfc"
        },
        PaletteDark = new PaletteDark()
        {
            Primary = "#AAA",
                Secondary = "#ffc107ff",
            Error = "#CC4141",
            Background = "#373737",
            AppbarBackground = "#323332",
            Surface = "#373737",
            BackgroundGrey = "#2f2f2f",
        }
    };
    private void SetThemePreference(ThemePreference preference)
    {
        themePreference = preference;
        Storage.SetItemAsync("DarkModePreference", preference);

        _isDarkMode = preference switch 
        {        
            ThemePreference.Light => false,
            ThemePreference.Dark => true,
            ThemePreference.System => systemIsDarkMode,
            _ => true
            };

        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        //Will default to 'light' if no stored value is found
        themePreference = await Storage.GetItemAsync<ThemePreference>("DarkModePreference");
        SetThemePreference(themePreference);

        try
        {
            await SignalRClient.StartAsync(StateData.CancellationTokenSource.Token);
        }
        catch (HttpRequestException e)
        {
            // Display error message
            Snackbar.Add("Unable to connect to Any Anything", Severity.Error);
        }

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            systemIsDarkMode = await _mudThemeProvider.GetSystemPreference();
            await _mudThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);
            StateHasChanged();
        }
    }

    private async Task OnSystemPreferenceChanged(bool newValue)
    {
        systemIsDarkMode = newValue;
        SetThemePreference(themePreference);
        StateHasChanged();
    }

    private async Task ClearMessageHistory()
    {
        await NotifierService.CancelMessageStream();
        StateData.ChatMessages.Clear();
        await NotifierService.Update();
    }
}